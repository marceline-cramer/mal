module Eval

include "./reader"
include "./types"
include "list"
include "map"
include "option"
include "result"
include "sys/file"

let add = (lhs, rhs) => Types.Number(lhs + rhs)
let sub = (lhs, rhs) => Types.Number(lhs - rhs)
let mul = (lhs, rhs) => Types.Number(lhs * rhs)
let div = (lhs, rhs) => Types.Number(lhs / rhs)
let lt  = (lhs, rhs) => Types.Bool(lhs < rhs)
let le  = (lhs, rhs) => Types.Bool(lhs <= rhs)
let gt  = (lhs, rhs) => Types.Bool(lhs > rhs)
let ge  = (lhs, rhs) => Types.Bool(lhs >= rhs)

let wrap = (fn) => Types.Function(fn)

let wrap_op = (fn) => {
  let cb = (args, env) => {
    match (args) {
      [Types.Number(lhs), Types.Number(rhs)] => {
        Ok(fn(lhs, rhs))
      },
      _ => Err("expected two numbers"),
    }
  }

  wrap(cb)
}

let wrap_one = (fn) => {
  let cb = (ast, env) => {
    match (ast) {
      [val] => fn(val, env),
      _ => Err("expected one argument"),
    }
  }

  wrap(cb)
}

let wrap_two = (fn) => {
  let cb = (args, env) => {
    match (args) {
      [lhs, rhs] => fn(lhs, rhs, env),
      _ => Err("expected two arguments"),
    }
  }

  wrap(cb)
}

let wrap_list = (fn) => {
  let cb = (val, env) => {
    match (val) {
      Types.List(list) => fn(list, env),
      Types.Vector(list) => fn(list, env),
      Types.Nil => fn([], env),
      _ => Err("must be given a list"),
    }
  }

  wrap_one(cb)
}

let wrap_str = (fn) => {
  let cb = (val, env) => {
    match (val) {
      Types.String(str) => fn(str, env),
      _ => Err("must be given a string"),
    }
  }

  wrap_one(cb)
}

let list = (ast, env) => Ok(Types.List(ast))

let is_list = (val, env) => {
  let is_list = match (val) {
    Types.List(_) => true,
    _ => false,
  }

  Ok(Types.Bool(is_list))
}

let is_empty = (list, env) => Ok(Types.Bool(List.length(list) == 0))

let count = (list, env) => Ok(Types.Number(List.length(list)))

let prn = (val, env) => {
  let str = Types.pr_str(val)
  print(str)
  Ok(Types.Nil)
}

let eq = (args, env) => {
  let rec eq = (args) => match (args) {
    (Types.Number(lhs), Types.Number(rhs)) => lhs == rhs,
    (Types.Bool(lhs), Types.Bool(rhs)) => lhs == rhs,
    (Types.String(lhs), Types.String(rhs)) => lhs == rhs,
    (Types.Nil, Types.Nil) => true,
    (Types.List(lhs), Types.List(rhs)) => {
      if (List.length(lhs) != List.length(rhs)) {
        false
      } else {
        List.every(eq, List.zip(lhs, rhs))
      }
    },
    _ => false,
  }

  match (args) {
    [lhs, rhs] => Ok(Types.Bool(eq((lhs, rhs)))),
    _ => Err("invalid comparison")
  }
}

let read_string = (str, env) => {
  Reader.read_str(str)
}

let atom = (val, env) => Ok(Types.Atom(box(val)))

let is_atom = (val, env) => {
  let val = match (val) {
    Types.Atom(_) => true,
    _ => false,
  }

  Ok(Types.Bool(val))
}

let deref = (val, env) => {
  match (val) {
    Types.Atom(val) => Ok(unbox(val)),
    _ => Err("deref expects an atom"),
  }
}

let reset = (atom, val, env) => {
  match (atom) {
    Types.Atom(atom) => {
      atom := val
      Ok(val)
    },
    _ => Err("expected atom")
  }
}

let swap = (args, env) => {
  match (args) {
    [Types.Atom(atom), Types.Function(fn), ...args] => {
      let args = [unbox(atom), ...args]
      match (fn(args, env)) {
        Err(err) => Err(err),
        Ok(val) => {
          atom := val
          Ok(val)
        },
      }
    },
    _ => Err("expected atom, function, and optional arguments"),
  }
}

provide let rec eval = (ast, env) => {
  match (ast) {
    Types.List([]) => Ok(ast),
    Types.List([Types.Symbol("do"), ...elems]) => {
      match (eval_list(elems, env)) {
        Err(err) => Err(err),
        Ok(evaluated) => {
          let last = List.length(evaluated) - 1
          let last = List.nth(last, evaluated)
          let last = Option.unwrapWithDefault(Types.Nil, last)
          Ok(last)
        }
      }
    },
    Types.List([Types.Symbol("if"), cond, then_ast]) => {
      match (eval(cond, env)) {
        Err(err) => Err(err),
        Ok(Types.Bool(false)) => Ok(Types.Nil),
        Ok(Types.Nil) => Ok(Types.Nil),
        Ok(_) => eval(then_ast, env),
      }
    },
    Types.List([Types.Symbol("if"), cond, then_ast, else_ast]) => {
      match (eval(cond, env)) {
        Err(err) => Err(err),
        Ok(Types.Bool(false)) => eval(else_ast, env),
        Ok(Types.Nil) => eval(else_ast, env),
        Ok(_) => eval(then_ast, env),
      }
    },
    Types.List([Types.Symbol("fn*"), Types.List(binds), body]) => {
      let rec to_symbols = (list) => {
        match (list) {
          [] => Ok([]),
          [Types.Symbol(symbol), ...rest] => {
            Result.map((rest) => [symbol, ...rest], to_symbols(rest))
          },
          _ => Err("expected symbol"),
        }
      }

      match (to_symbols(binds)) {
        Err(err) => Err(err),
        Ok(binds) => {
          let cb = (args, env) => {
            let env: Types.Env = { outer: Some(env), data: Map.make() }
            let binds = List.zip(binds, args)
            List.forEach((arg) => {
              let (arg, bind) = arg
              let _ = Types.set(arg, bind, env)
            }, binds)

            eval(body, env)
          }

          Ok(Types.Function(cb))
        }
      }
    },
    Types.List([Types.Symbol("def!"), Types.Symbol(key), val]) => {
      Result.map((val) => Types.set(key, val, env), eval(val, env))
    },
    Types.List([Types.Symbol("let*"), Types.List(bindings), body]) => {
      let inner: Types.Env = { outer: Some(env), data: Map.make() }
      let mut remaining = bindings
      let mut err = None
      while (true) {
        match (remaining) {
          [] => break,
          [Types.Symbol(key), val, ...tail] => {
            remaining = tail
            match (eval(val, inner)) {
              Ok(val) => { let _ = Types.set(key, val, inner) },
              Err(eval_err) => {
                err = Some(eval_err)
                break
              }
            }
          },
          [_] => {
            err = Some("uneven let* bindings")
            break
          }
        }
      }

      match (err) {
        Some(err) => Err(err),
        None => eval(body, inner),
      }
    },
    Types.List(list) => {
      let evaluated = eval_list(list, env)
      Result.flatMap((list) => call_list(list, env), evaluated)
    },
    ast => eval_ast(ast, env)
  }
},

call_list = (list, env) => {
  match (list) {
    [Types.Function(fn), ...args] => fn(args, env),
    _ => Err("cannot call list"),
  }
},

eval_list = (list, env) => {
  match (list) {
    [] => Ok([]),
    [first, ...rest] => {
      match (eval(first, env)) {
        Err(err) => Err(err),
        Ok(evaluated) => {
          match (eval_list(rest, env)) {
            Err(err) => Err(err),
            Ok(rest) => Ok([evaluated, ...rest])
          }
        }
      }
    }
  }
},

eval_ast = (ast, env) => {
  match (ast) {
    Types.Symbol(sym) => Types.find(sym, env),
    Types.List(list) => {
      Result.map((list) => Types.List(list), eval_list(list, env))
    },
    Types.Vector(vec) => {
      Result.map((vec) => Types.Vector(vec), eval_list(vec, env))
    },
    ast => Ok(ast),
  }
}

provide let make_env: () -> Types.Env = () => {
  let data = [
    ("+", wrap_op(add)),
    ("-", wrap_op(sub)),
    ("*", wrap_op(mul)),
    ("/", wrap_op(div)),
    ("<", wrap_op(lt)),
    ("<=", wrap_op(le)),
    (">", wrap_op(gt)),
    (">=", wrap_op(ge)),
    ("list", wrap(list)),
    ("list?", wrap_one(is_list)),
    ("empty?", wrap_list(is_empty)),
    ("count", wrap_list(count)),
    ("prn", wrap_one(prn)),
    ("=", wrap(eq)),
    ("read-string", wrap_str(read_string)),
    ("atom", wrap_one(atom)),
    ("atom?", wrap_one(is_atom)),
    ("deref", wrap_one(deref)),
    ("reset!", wrap_two(reset)),
    ("swap!", wrap(swap)),
    ("eval", wrap_one((val, env) => eval(val, env))),
  ]

  { outer: None, data: Map.fromList(data) }
}
