module Eval

include "./types"
include "list"
include "map"
include "option"
include "result"

let add = (lhs, rhs) => lhs + rhs
let sub = (lhs, rhs) => lhs - rhs
let mul = (lhs, rhs) => lhs * rhs
let div = (lhs, rhs) => lhs / rhs

let wrap_op = (fn) => {
  let cb = (ast, env) => {
    match (ast) {
      [Types.Number(lhs), Types.Number(rhs)] => {
        let result = fn(lhs, rhs)
        Ok(Types.Number(result))
      },
      _ => Err("Invalid arguments to operator"),
    }
  }

  Types.Function(cb)
}

provide let make_env: () -> Types.Env = () => {
  let data = [
    ("+", wrap_op(add)),
    ("-", wrap_op(sub)),
    ("*", wrap_op(mul)),
    ("/", wrap_op(div)),
  ]

  { outer: None, data: Map.fromList(data) }
}

provide let rec eval = (ast, env) => {
  match (ast) {
    Types.List([]) => Ok(ast),
    Types.List([Types.Symbol("def!"), Types.Symbol(key), val]) => {
      Result.map((val) => Types.set(key, val, env), eval(val, env))
    },
    Types.List(list) => {
      let evaluated = eval_list(list, env)
      Result.flatMap((list) => call_list(list, env), evaluated)
    },
    ast => eval_ast(ast, env)
  }
},

call_list = (list, env) => {
  match (list) {
    [Types.Function(fn), ...args] => fn(args, env),
    _ => Err("cannot call list"),
  }
},

eval_list = (list, env) => {
  match (list) {
    [] => Ok([]),
    [first, ...rest] => {
      match (eval(first, env)) {
        Err(err) => Err(err),
        Ok(evaluated) => {
          match (eval_list(rest, env)) {
            Err(err) => Err(err),
            Ok(rest) => Ok([evaluated, ...rest])
          }
        }
      }
    }
  }
},

eval_ast = (ast, env) => {
  match (ast) {
    Types.Symbol(sym) => Types.get(sym, env),
    Types.List(list) => {
      Result.map((list) => Types.List(list), eval_list(list, env))
    },
    Types.Vector(vec) => {
      Result.map((vec) => Types.Vector(vec), eval_list(vec, env))
    },
    ast => Ok(ast),
  }
}
