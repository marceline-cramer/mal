module Types

include "list"
include "map"
include "option"
include "string"

provide record Env {
  outer: Option<Env>,
  data: Map.Map<String, MalType>,
},

provide enum MalType {
  Nil,
  Bool(Bool),
  String(String),
  Symbol(String),
  Number(Number),
  List(List<MalType>),
  Vector(List<MalType>),
  Function((List<MalType>, Env) -> Result<MalType, String>),
}

provide let rec pr_str = (val) => {
  match (val) {
    Nil => "nil",
    Bool(true) => "true",
    Bool(false) => "false",
    String(str) => "\"" ++ str ++ "\"", // TODO escaping
    Symbol(sym) => sym,
    Number(num) => toString(num),
    Vector(vector) => {
      let strs = List.map(pr_str, vector)
      let joined = List.join(" ", strs)
      "[" ++ joined ++ "]"
    },
    List(list) => {
      let strs = List.map(pr_str, list)
      let joined = List.join(" ", strs)
      "(" ++ joined ++ ")"
    },
    Function(_) => "<function>",
  }
}

provide let set = (key, val, env) => {
  Map.set(key, val, env.data)
}

provide let rec find = (key, env) => {
  match (Map.get(key, env.data)) {
    Some(val) => Ok(val),
    None => match (env.outer) {
      Some(outer) => find(key, outer),
      None => Err("not found"),
    }
  }
}

provide let get = (key, env) => {
  Option.toResult("not found", Map.get(key, env.data))
}
