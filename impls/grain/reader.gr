module Reader

include "list"
include "regex"
include "number"
include "string"
include "./types"

let regex = Regex.make("[\s,]")

provide record Reader {
  mut tokens: List<String>
}

provide let next = (reader) => {
  match (reader.tokens) {
    [next, ...rest] => {
      reader.tokens = rest
      Some(next)
    },
    [] => None
  }
}

provide let peek = (reader) => {
  match (reader.tokens) {
    [current, ..._] => Some(current),
    [] => None
  }
}

let tokenize = (source) => {
  let mut remaining = source
  let mut tokens = []

  while(String.length(remaining) > 0) {
    tokens = [remaining, ...tokens]
    break
  }

  { tokens, }
}

let rec read_list = (reader) => {
  let mut list = []
  let mut err = None

  while(true) {
    match (peek(reader)) {
      Some(")") => break,
      Some(_) => match (read_form(reader)) {
        Ok(val) => list = [val, ...list],
        Err(form_err) => {
          err = Some(form_err)
          break
        }
      },
      None => {
        err = Some("Unexpected EOF while parsing list")
        break
      }
    }
  }

  match (err) {
    Some(err) => Err(err),
    None => Ok(Types.List(list))
  }
},

read_atom = (reader, tok) => {
  match (Number.parseInt(tok, 10)) {
    Ok(number) => Ok(Types.Number(number)),
    Err(_) => Ok(Types.Symbol(tok)),
  }
},

read_form = (reader) => {
  match (peek(reader)) {
    Some("(") => read_list(reader),
    Some(tok) => read_atom(reader, tok),
    None => Err("Unexpected EOF")
  }
}

provide let read_str = (source) => {
  let reader = tokenize(source)
  read_form(reader)
}
